% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clust.R
\name{ClustConti}
\alias{ClustConti}
\title{Division of geolocalised points into spatially continuous clusters using DBSCAN}
\usage{
ClustConti(
  data_sf,
  clusters,
  noise,
  r_p = 0.001,
  eps_r = 1e-15,
  eps_np = 0.01,
  minPts0 = 5
)
}
\arguments{
\item{data_sf}{Object in \code{sf} or the \code{data.frame} class - in the case of a \code{data.frame} object, the first and second columns must contain X and Y coordinates.}

\item{clusters}{Number of density clusters to generate; function automatically adds an extra cluster for noise data (low density cluster).}

\item{noise}{Proportion of noise data that should result from DBSCAN clustering, can be between 0 (no noise) and 1 (all noise).}

\item{r_p}{DBSCAN optimisation parameter for radius, default value 0.001.}

\item{eps_r}{DBSCAN parameter - the initial size of the radius in coordinate units, default value 1e-15.}

\item{eps_np}{DSBCAN optimisation parameter for radius, default value 0.01.}

\item{minPts0}{DBSCAN parameter - expected number of points within a radius to be considered as being dense, default value 5.}
}
\value{
\code{ClustConti()} returns a list object:
\item{type}{Simply the name of the wrapper function used: "ClustConti".}
\item{cluster}{Vector of cluster assignments, 1:n are high density clusters, 0 is noise (low density cluster of remaining points).}
\item{parameters}{A list of 6 parameters used in clustering - two user-defined (\code{clusters} and \code{noise}) and four that can also be set
by default (\code{r_p}, \code{eps_r}, \code{eps_np}, \code{minPts0}).}
}
\description{
This is a wrapper function for the DBSCAN algorithm (based on \code{\link[dbscan:dbscan]{dbscan::dbscan()}}). For a given number of n clusters, it generates the division into n+1 high-density groups
(n clusters + noise group) that guarantees the noise ratio specified by the user.
}
\details{
The function performs modified DBSCAN clustering (based on \code{\link[dbscan:dbscan]{dbscan::dbscan()}}), with user-specified restrictions on the number of clusters and noise ratio. It produces spatially
continuous clusters of geolocated points. The resulting clusters may have different internal densities and sizes. This method assumes that the area
and its spatial structure are known (as visible agglomeration points), which allows an appropriate number of clusters to be set. For example,
for urbanisation data, each cluster will cover the whole city with suburbs.

The method adjusts the basic parameters of DBSCAN: minPts and eps, in iterations, to obtain user-defined parameters of the final partitioning:
ratio of noise and number of clusters.

The output of this algorithm is identical to typical DBSCAN, but the input parameters are different (number of clusters and percentage of noise,
instead of the number of points within the radius minPts and radius eps) - this is to get control over the relative point density and the number of clusters.
}
\examples{
# The following example is on selected data from the firms_sf dataset included in the package
sub_sf<-firms_sf[1:1000,]
cc<-ClustConti(sub_sf, clusters=4, noise =0.2, minPts0=30)
cc

}
\seealso{
\code{\link[=ClustDisjoint]{ClustDisjoint()}}, \code{\link[=ssr]{ssr()}}
}
